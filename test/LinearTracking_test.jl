
@testset "LinearTracking" begin
  @testset "Utility functions" begin
    # Thick Quadrupole
    mf(K1,L) = [cos(sqrt(K1)*L)            sincu(sqrt(K1)*L)*L;  
                -sqrt(K1)*sin(sqrt(K1)*L)  cos(sqrt(K1)*L)     ]
    md(K1,L) = [cosh(sqrt(K1)*L)           sinhcu(sqrt(K1)*L)*L; 
                sqrt(K1)*sinh(sqrt(K1)*L)  cosh(sqrt(K1)*L)     ]

    L = 1.2
    K1 = 0.36
  
    # Focusing
    @test all(LinearTracking.linear_quad_matrices(K1, L) .== (mf(K1,L), md(K1,L)))

    # Defocusing
    @test all(LinearTracking.linear_quad_matrices(-K1, L) .== (md(K1,L), mf(K1,L)))


    # Thin Quadrupole
    mft(K1L) = [one(K1L) zero(K1L);
                -K1L     one(K1L)  ]
    mdt(K1L) = [one(K1L) zero(K1L);
                K1L      one(K1L)  ]
    K1L = K1*L

    @test all(LinearTracking.linear_thin_quad_matrices(K1L) .== (mft(K1L), mdt(K1L)))
    @test all(LinearTracking.linear_thin_quad_matrices(-K1L) .== (mdt(K1L), mft(K1L)))
    

    # Solenoid
    M_sol_ESR = [ 0.9620267534604E+00  0.2680023374209E+01  0.1911315753266E+00 0.5324561791884E+00;
                 -0.1363095540075E-01  0.9620267534604E+00 -0.2708142959206E-02 0.1911315753266E+00;
                 -0.1911315753266E+00 -0.5324561791884E+00  0.9620267534604E+00 0.2680023374209E+01;
                  0.2708142959206E-02 -0.1911315753266E+00 -0.1363095540075E-01 0.9620267534604E+00]
    @test LinearTracking.linear_solenoid_matrix(0.142634259959, 2.75) ≈ M_sol_ESR

    # SBend
    gamma_0 = 3.4924264755852841E+04
    L = 3.8
    K0 = -1.4085135130897E-3
    g = K0

    M_sbend_ESR = [ 0.9999856762017098E+00  0.3799981856504840E+01  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00 -0.1016944328690584E-01
                   -0.7538823207846669E-05  0.9999856762017098E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00 -0.5352325794382752E-02
                    0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01  0.3800000000000000E+01  0.0000000000000000E+00  0.0000000000000000E+00
                    0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01  0.0000000000000000E+00  0.0000000000000000E+00
                    0.5352325794382752E-02  0.1016944328690584E-01  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01 -0.1814037965058192E-04
                    0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01]

    M = zeros(6,6)
    mx, my, r56, d, t = LinearTracking.linear_dipole_matrices(g, 0, 0, K0, 0, gamma_0, L)
    M[1:2, 1:2] = mx
    M[3:4, 3:4] = my
    M[5, 5] = 1.0
    M[6, 6] = 1.0
    M[5, 6] = r56
    M[5, 1:4] = t
    M[1:4, 6] = d
    @test M ≈ M_sbend_ESR


    L=3.8
    K0=-1.4085135130897E-1
    g = K0 
    e1 = -2.6e1
    e2 = 2e-1

    M_crazy_bend = [  0.1461364082101138E+01  0.3621145980031785E+01  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00 -0.9928997816884232E+00
                      0.2924452887724791E-01  0.7567578276535424E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00 -0.4816940474576835E+00
                      0.0000000000000000E+00  0.0000000000000000E+00  0.3690896823132183E+00  0.3800000000000000E+01  0.0000000000000000E+00  0.0000000000000000E+00
                      0.0000000000000000E+00  0.0000000000000000E+00 -0.1554907888474444E+00  0.1108497533216086E+01  0.0000000000000000E+00  0.0000000000000000E+00
                      0.6748934931787792E+00  0.9928997816884232E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01 -0.1788540168527052E+00
                      0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01 ]
    mx, my, r56, d, t = LinearTracking.linear_dipole_matrices(g, e1, e2, K0, 0, gamma_0, L)
    M[1:2, 1:2] = mx
    M[3:4, 3:4] = my
    M[5, 5] = 1.0
    M[6, 6] = 1.0
    M[5, 6] = r56
    M[5, 1:4] = t
    M[1:4, 6] = d

    @test M ≈ M_crazy_bend

    #with K1
    gamma_0 = 1.4142135623730951
    L = 1.0

    #reduce to quad focusing
    K0 = 0.0
    g = 0.0
    K1 = 0.25
    M_expected= [
       0.8775825618903728E+00  0.9588510772084060E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00
      -0.2397127693021015E+00  0.8775825618903728E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00
       0.0000000000000000E+00  0.0000000000000000E+00  0.1127625965206381E+01  0.1042190610987495E+01  0.0000000000000000E+00  0.0000000000000000E+00
       0.0000000000000000E+00  0.0000000000000000E+00  0.2605476527468737E+00  0.1127625965206381E+01  0.0000000000000000E+00  0.0000000000000000E+00
       0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01  0.4999999999999999E+00
       0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01
    ]
    mx, my, r56, d, t = LinearTracking.linear_dipole_matrices(g, 0, 0, K0, K1, gamma_0, L)
    M[1:2, 1:2] = mx
    M[3:4, 3:4] = my
    M[5, 5] = 1.0
    M[6, 6] = 1.0
    M[5, 6] = r56
    M[5, 1:4] = t
    M[1:4, 6] = d

    @test M ≈ M_expected

    #defocusing
    K1 = - 0.25
    M_expected= [
      0.1127625965206381E+01  0.1042190610987495E+01  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00
      0.2605476527468737E+00  0.1127625965206381E+01  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00
      0.0000000000000000E+00  0.0000000000000000E+00  0.8775825618903728E+00  0.9588510772084060E+00  0.0000000000000000E+00  0.0000000000000000E+00
      0.0000000000000000E+00  0.0000000000000000E+00 -0.2397127693021015E+00  0.8775825618903728E+00  0.0000000000000000E+00  0.0000000000000000E+00
      0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01  0.4999999999999999E+00
      0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01

    ]
    mx, my, r56, d, t = LinearTracking.linear_dipole_matrices(g, 0, 0, K0, K1, gamma_0, L)
    M[1:2, 1:2] = mx
    M[3:4, 3:4] = my
    M[5, 5] = 1.0
    M[6, 6] = 1.0
    M[5, 6] = r56
    M[5, 1:4] = t
    M[1:4, 6] = d
    @test M ≈ M_expected


    # dg = 0.0, g = -1.1e-13, k1 = -1.1e-13 ,K0 = -1.1e-12, e = 0
    L = 0.32
    K1 = -1.1e-13
    g = -1.1e-12
    K0 = -1.1e-12
    M_expected= [
      0.1000000000000000E+01  0.3200000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00 -0.5632000000000001E-13
      -0.3872000000000000E-24  0.1000000000000000E+01  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00 -0.3520000000000000E-12
      0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01  0.3200000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00
      0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01  0.0000000000000000E+00  0.0000000000000000E+00
      0.3520000000000000E-12  0.5632000000000001E-13  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01  0.1600000000000000E+00
      0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01
    ]
    mx, my, r56, d, t = LinearTracking.linear_dipole_matrices(g, 0, 0, K0, K1, gamma_0, L)
    M[1:2, 1:2] = mx
    M[3:4, 3:4] = my
    M[5, 5] = 1.0
    M[6, 6] = 1.0
    M[5, 6] = r56
    M[5, 1:4] = t
    M[1:4, 6] = d
    @test M ≈ M_expected


    #  dg = -0.01 , g = 0.25, k1 = 0.25, e1 = 0.5, e2 = 0.2
    L = 1
     e1 = 0.5
     e2 = 0.2 
     g = 0.25
     K1 = 0.25
     K0 = 0.24
    
     M_expected= [
      0.9734056928978285E+00  0.9491282811321522E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.1170583759019584E+00
      -0.1355634359386695E+00  0.8951384971554924E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.2434778344045677E+00
       0.0000000000000000E+00  0.0000000000000000E+00  0.9909816470445496E+00  0.1042190610987494E+01  0.0000000000000000E+00  0.0000000000000000E+00
       0.0000000000000000E+00  0.0000000000000000E+00  0.6449002140313032E-01  0.1076922966223960E+01  0.0000000000000000E+00  0.0000000000000000E+00
      -0.2528715457465107E+00 -0.1263082397778435E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01  0.4893946839414888E+00
       0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01
    ]
    mx, my, r56, d, t = LinearTracking.linear_dipole_matrices(g, e1, e2, K0, K1, gamma_0, L)
    M[1:2, 1:2] = mx
    M[3:4, 3:4] = my
    M[5, 5] = 1.0
    M[6, 6] = 1.0
    M[5, 6] = r56
    M[5, 1:4] = t
    M[1:4, 6] = d
    @test M ≈ M_expected

    # dg = 0.25, g = 0.0  Kn1 = -0.25, e1 = 0.01, e2 = 0.9
    g = 0.0
    K0 = 0.25
    K1 = 0.25
    e1 = 0.01
    e2 = 0.9
    mx, my, r56, d, t = LinearTracking.linear_dipole_matrices(g, e1, e2, K0, K1, gamma_0, L)
    M_expected= [
      0.8799797694908450E+00  0.9588510772084049E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.1198563846510506E+00
      0.3970969468791577E-01  0.1179658577978163E+01  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.2760093759621979E-01
      0.0000000000000000E+00  0.0000000000000000E+00  0.1125020401826222E+01  0.1042190610987497E+01  0.0000000000000000E+00  0.0000000000000000E+00
      0.0000000000000000E+00  0.0000000000000000E+00 -0.9669743220700583E-01  0.7992946995339576E+00  0.0000000000000000E+00  0.0000000000000000E+00
     -0.1952880626276211E-01  0.1149244235329649E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01  0.5193195846663738E+00
      0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01
    ]
    M[1:2, 1:2] = mx
    M[3:4, 3:4] = my
    M[5, 5] = 1.0
    M[6, 6] = 1.0
    M[5, 6] = r56
    M[5, 1:4] = t
    M[1:4, 6] = d
    
    @test M ≈ M_expected

    # K0 = -1e-12, g = -1.1e-12   K1 = -3.5e-20, e1 = 0.01, e2 = 0.9
    L = 0.32
    g = -1.1e-12
    K0 = -1e-12
    K1 = -3.5e-20
    e1 = 0.0 
    e2 = 0.9
    mx, my, r56, d, t = LinearTracking.linear_dipole_matrices(g, e1, e2, K0, K1, gamma_0, L)
    M_expected= [
      0.1000000000000000E+01  0.3200000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00 -0.5120000000000000E-13
      -0.1260158217550691E-11  0.9999999999995968E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00 -0.3519999999999355E-12
       0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01  0.3200000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00
       0.0000000000000000E+00  0.0000000000000000E+00  0.1260158217550339E-11  0.1000000000000403E+01  0.0000000000000000E+00  0.0000000000000000E+00
       0.3520000000000000E-12  0.6144000000000001E-13  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01  0.1600000000000000E+00
       0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01
     ]
    M[1:2, 1:2] = mx
    M[3:4, 3:4] = my
    M[5, 5] = 1.0
    M[6, 6] = 1.0
    M[5, 6] = r56
    M[5, 1:4] = t
    M[1:4, 6] = d
    
    @test M ≈ M_expected

    #L = 1, e1 = 0, e2 = 0, g = -1.1e-12, dg = 0.001 (k0 = 0.0009999999989) , K1 = 1e-17
    L = 1
    g = -1.1e-12
    K1 = 0
    K0 = 0.0009999999989
    mx, my, r56, d, t = LinearTracking.linear_dipole_matrices(g, 0, 0, K0, K1, gamma_0, L)
    M_expected = [
    0.1000000000000000E+01  0.1000000000000000E+01  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.4999999995518367E-03
    0.1089999998790000E-14  0.1000000000000000E+01  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00 -0.1099999890379778E-11
    0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01  0.1000000000000000E+01  0.0000000000000000E+00  0.0000000000000000E+00
    0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E-16  0.1000000000000000E+01  0.0000000000000000E+00  0.0000000000000000E+00
    0.1100000333066908E-11  0.4999999994500001E-03  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01  0.5000003045971123E+00
    0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01
    ]
    M[1:2, 1:2] = mx
    M[3:4, 3:4] = my
    M[5, 5] = 1.0
    M[6, 6] = 1.0
    M[5, 6] = r56
    M[5, 1:4] = t
    M[1:4, 6] = d
    @test M ≈ M_expected

    L = 1.1
    g = -0.01
    K1 = -0.2
    K0 = 0.0009
    mx, my, r56, d, t = LinearTracking.linear_dipole_matrices(g, 0, 0, K0, K1, gamma_0, L)
    M_expected = [
      0.1123465603262737E+01  0.1144908652190447E+01  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.6907249918518777E-03
      0.2289920346159591E+00  0.1123465603262737E+01  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00 -0.1095366238478229E-01
      0.0000000000000000E+00  0.0000000000000000E+00  0.8814205674902973E+00  0.1056167087172012E+01  0.0000000000000000E+00  0.0000000000000000E+00
      0.0000000000000000E+00  0.0000000000000000E+00 -0.2112334174344024E+00  0.8814205674902973E+00  0.0000000000000000E+00  0.0000000000000000E+00
      0.1246423344030005E-01  0.1331694860716983E-01  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01  0.5500082219119130E+00
      0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01
    ]
    M[1:2, 1:2] = mx
    M[3:4, 3:4] = my
    M[5, 5] = 1.0
    M[6, 6] = 1.0
    M[5, 6] = r56
    M[5, 1:4] = t
    M[1:4, 6] = d
    @test M ≈ M_expected

    L = 0.32
    g = -1.1e-12
    K0 = -1.1e-12
    K1 = 3.5e-6
    e2 = 0.9
    M_expected = [
       0.9999998208000054E+00  0.3199999808853337E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00 -0.5631999830946199E-13
      -0.1120001319272459E-05  0.9999998207995618E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00 -0.3519999789737889E-12
       0.0000000000000000E+00  0.0000000000000000E+00  0.1000000179200005E+01  0.3200000191146670E+00  0.0000000000000000E+00  0.0000000000000000E+00
       0.0000000000000000E+00  0.0000000000000000E+00  0.1120001453075622E-05  0.1000000179200449E+01  0.0000000000000000E+00  0.0000000000000000E+00
       0.3519999789738670E-12  0.5631999830946198E-13  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01  0.1600000004320949E+00
       0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.0000000000000000E+00  0.1000000000000000E+01
    ]
    mx, my, r56, d, t = LinearTracking.linear_dipole_matrices(g, 0, e2, K0, K1, gamma_0, L)
    M[1:2, 1:2] = mx
    M[3:4, 3:4] = my
    M[5, 5] = 1.0
    M[6, 6] = 1.0
    M[5, 6] = r56
    M[5, 1:4] = t
    M[1:4, 6] = d
    @test M ≈ M_expected

  end
  
  @testset "Kernels" begin
    Ls = rand(Float64)
    Lt = TPS{D1}(rand(Float64))

    gamma_0s = rand(Float64)
    gamma_0t = TPS{D1}(rand(Float64))

    # Drift =======================================================================
    M_drift(L, gamma_0) = SA[1.0  L    0.0  0.0  0.0  0.0;
                             0.0  1.0  0.0  0.0  0.0  0.0;
                             0.0  0.0  1.0  L    0.0  0.0;
                             0.0  0.0  0.0  1.0  0.0  0.0;
                             0.0  0.0  0.0  0.0  1.0  L/gamma_0^2;
                             0.0  0.0  0.0  0.0  0.0  1.0] 
    # Scalar parameters
    test_matrix(M_drift(Ls,gamma_0s), KernelCall(LinearTracking.linear_drift!, (Ls, Ls/gamma_0s^2)))

    # GTPSA parameters
    test_matrix(M_drift(Lt,gamma_0t), KernelCall(LinearTracking.linear_drift!, (Lt, Lt/gamma_0t^2)))

    # Coast uncoupled  =============================================================
    function coast_uncoupled(::Type{T}) where {T}
      mx = @SArray T[1 2; 3 4]
      my = @SArray T[5 6; 7 8]
      r56 = T(9)
      d = @SArray T[10, 11, 12, 13]
      t = @SArray T[14, 15, 16, 17]
      return mx, my, r56, d, t
    end

    # Scalar parameters
    mxs, mys, r56s, ds, ts = coast_uncoupled(Float64)
    Ms = zeros(6,6)
    Ms[1:2, 1:2] = mxs
    Ms[3:4, 3:4] = mys
    Ms[5, 5] = 1.0
    Ms[6, 6] = 1.0
    Ms[5, 6] = r56s
    test_matrix(Ms, KernelCall(LinearTracking.linear_coast_uncoupled!, (mxs, mys, r56s, nothing, nothing)))
    Ms[5, 1:4] = ts
    Ms[1:4, 6] = ds
    test_matrix(Ms, KernelCall(LinearTracking.linear_coast_uncoupled!, (mxs, mys, r56s, ds, ts)))

    # GTPSA parameters
    mxt, myt, r56t, dt, tt = coast_uncoupled(TPS64{D1})
    Mt = zeros(TPS64{D1},6,6)
    Mt[1:2, 1:2] = mxt
    Mt[3:4, 3:4] = myt
    Mt[5, 5] = 1.0
    Mt[6, 6] = 1.0
    Mt[5, 6] = r56t
    test_matrix(scalar.(Mt), KernelCall(LinearTracking.linear_coast_uncoupled!, (mxt, myt, r56t, nothing, nothing)))
    Mt[5, 1:4] = tt
    Mt[1:4, 6] = dt
    test_matrix(scalar.(Mt), KernelCall(LinearTracking.linear_coast_uncoupled!, (mxt, myt, r56t, dt, tt)))

    # Coast =============================================================
    function coast(::Type{T}) where {T}
      mxy = @SArray T[1 2 3 4; 5 6 7 8; 9 10 11 12; 13 14 15 16]
      r56 = T(17)
      d = @SArray T[18, 19, 20, 21]
      t = @SArray T[22, 23, 24, 25]
      return mxy, r56, d, t
    end

    # Scalar parameters
    mxys, r56s, ds, ts = coast(Float64)
    Ms = zeros(6,6)
    Ms[1:4, 1:4] = mxys
    Ms[5, 5] = 1.0
    Ms[6, 6] = 1.0
    Ms[5, 6] = r56s
    test_matrix(Ms, KernelCall(LinearTracking.linear_coast!, (mxys, r56s, nothing, nothing)))
    Ms[5, 1:4] = ts
    Ms[1:4, 6] = ds
    test_matrix(Ms, KernelCall(LinearTracking.linear_coast!, (mxys, r56s, ds, ts)))

    # GTPSA parameters
    mxyt, r56t, dt, tt = coast(TPS64{D1})
    Mt = zeros(TPS64{D1},6,6)
    Mt[1:4, 1:4] = mxyt
    Mt[5, 5] = 1.0
    Mt[6, 6] = 1.0
    Mt[5, 6] = r56t
    test_matrix(scalar.(Mt), KernelCall(LinearTracking.linear_coast!, (mxyt, r56t, nothing, nothing)))
    Mt[5, 1:4] = tt
    Mt[1:4, 6] = dt
    test_matrix(scalar.(Mt), KernelCall(LinearTracking.linear_coast!, (mxyt, r56t, dt, tt)))


    # 6D =============================================================
    function sixD(::Type{T}) where {T}
      SMatrix{6,6}(collect(T, reshape(1:36, 6,6)))
    end

    # Scalar parameters
    Ms = sixD(Float64)
    test_matrix(Ms, KernelCall(LinearTracking.linear_6D!, (Ms,)))

    # GTPSA parameters
    Mt = sixD(TPS64{D1})
    test_matrix(Ms, KernelCall(LinearTracking.linear_6D!, (Mt,)))
  end
end